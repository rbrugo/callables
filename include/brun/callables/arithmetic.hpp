/**
 * @author      : Riccardo Brugo (brugo.riccardo@gmail.com)
 * @created     : Monday Dec 13, 2021 13:24:01 CET
 * @description : implementations of partially-applicable arithmetic functions
 * @license     :
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 * */

#ifndef CB_ARITHMETIC_HPP
#define CB_ARITHMETIC_HPP

#include "detail/partial.hpp"

namespace callables
{

// plus
// minus
// multiplies
// divides
// negate

#define CB_FWD(x) static_cast<decltype(x) &&>(x)
// ....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo.... //
// ....................................PLUS.................................... //
// ....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo.... //
struct plus_fn : public arithmetic_operator<plus_fn>
{
    template <typename T, typename U>
        requires requires(T && t, U && u) { CB_FWD(t) + CB_FWD(u); }
    constexpr CB_STATIC
    auto operator()(T && t, U && u) CB_CONST noexcept(noexcept(CB_FWD(t) + CB_FWD(u)))
        -> decltype(auto)
    { return CB_FWD(t) + CB_FWD(u); }

    using binary_fn<plus_fn>::operator();
};

constexpr inline plus_fn plus;

// ....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo.... //
// ...................................MINUS.................................... //
// ....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo.... //
struct minus_fn : public arithmetic_operator<minus_fn>
{
    template <typename T, typename U>
        requires requires(T && t, U && u) { CB_FWD(t) - CB_FWD(u); }
    constexpr CB_STATIC
    auto operator()(T && t, U && u) CB_CONST noexcept(noexcept(CB_FWD(t) - CB_FWD(u)))
        -> decltype(auto)
    { return CB_FWD(t) - CB_FWD(u); }

    using binary_fn<minus_fn>::operator();
};

constexpr inline minus_fn minus;

// ....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo.... //
// .................................MULTIPLIES................................. //
// ....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo.... //
struct multiplies_fn : public arithmetic_operator<multiplies_fn>
{
    template <typename T, typename U>
        requires requires(T && t, U && u) { CB_FWD(t) * CB_FWD(u); }
    constexpr CB_STATIC
    auto operator()(T && t, U && u) CB_CONST noexcept(noexcept(CB_FWD(t) * CB_FWD(u)))
        -> decltype(auto)
    { return CB_FWD(t) * CB_FWD(u); }

    using binary_fn<multiplies_fn>::operator();
};

constexpr inline multiplies_fn multiplies;

// ....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo.... //
// ..................................DIVIDES................................... //
// ....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo.... //
struct divides_fn : public arithmetic_operator<divides_fn>
{
    template <typename T, typename U>
        requires requires(T && t, U && u) { CB_FWD(t) / CB_FWD(u); }
    constexpr CB_STATIC
    auto operator()(T && t, U && u) CB_CONST noexcept(noexcept(CB_FWD(t) / CB_FWD(u)))
        -> decltype(auto)
    { return CB_FWD(t) / CB_FWD(u); }

    using binary_fn<divides_fn>::operator();
};

constexpr inline divides_fn divides;

// ....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo.... //
// ...................................NEGATE................................... //
// ....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo.... //
struct negate_fn
{
    template <typename T>
        requires requires(T && t) { -CB_FWD(t); }
    constexpr CB_STATIC auto operator()(T && t) CB_CONST noexcept(noexcept( -CB_FWD(t) ))
    { return -CB_FWD(t); }
};

constexpr inline negate_fn negate;

#undef CB_FWD
} // namespace callables

#endif /* CB_ARITHMETIC_HPP */
